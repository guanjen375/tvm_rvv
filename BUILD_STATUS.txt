====================================================================== 
TVM my_device LLVM Codegen 配置檢查報告
======================================================================
日期：2025-10-02
檢查對象：/home/david/tvm/build

======================================================================
✅ 配置狀態：正確
======================================================================

在 build/config.cmake 中找到：

  第 154 行：set(USE_LLVM /home/david/Downloads/clang+llvm-18.1.7-x86_64-linux-gnu-ubuntu-18.04/bin/llvm-config)
  第 155 行：set(TVM_MY_DEVICE_USE_LLVM ON)

結論：配置正確！my_device 已設定使用 LLVM backend。

======================================================================
📝 已添加的 Debug 訊息
======================================================================

為了追蹤實際執行路徑，在以下文件中添加了 LOG(INFO) 訊息：

1. src/target/source/codegen_my_device.cc (第 419, 478 行)
   - LLVM 模式：[my_device codegen] Using LLVM backend mode
   - C++ 模式：[my_device codegen] Using C++ source codegen + runtime compilation mode

2. src/runtime/my_device/my_device_module.cc (第 58, 119, 126 行)  
   - 載入模組：[my_device runtime] Loading my_device binary module (C++ runtime mode)
   - 執行函數：[my_device runtime] Invoking C++ runtime dynamic compilation for function: XXX

======================================================================
🔍 如何驗證
======================================================================

方法 1：編譯 rvv_test.py 並檢查訊息
-----------------------------------
由於有 libstdc++ 版本衝突，需使用系統 Python：

  export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/local/lib
  /usr/bin/python3 rvv_test.py mobilenet 2>&1 | tee output.txt
  grep "my_device codegen" output.txt

預期看到（LLVM 模式）：
  ✓ [INFO] [my_device codegen] Using LLVM backend mode

如果看到（C++ 模式，需重新編譯）：
  ✗ [INFO] [my_device codegen] Using C++ source codegen + runtime compilation mode

方法 2：檢查編譯時的宏定義
--------------------------
  cd build
  make VERBOSE=1 2>&1 | grep codegen_my_device.cc | grep "\-D.*LLVM"

應該包含：
  -DTVM_MY_DEVICE_USE_LLVM=1

方法 3：確保 CMakeCache.txt 正確
-------------------------------
  grep TVM_MY_DEVICE_USE_LLVM build/CMakeCache.txt

應該顯示：
  TVM_MY_DEVICE_USE_LLVM:BOOL=ON

======================================================================
⚠️ Libstdc++ 版本衝突
======================================================================

錯誤訊息：
  OSError: libstdc++.so.6: version `GLIBCXX_3.4.30' not found

原因：
  TVM 使用系統 GCC 11+ 編譯，Conda 環境的 libstdc++ 太舊

解決方案：
  A) 使用系統 Python：
     /usr/bin/python3 rvv_test.py mobilenet

  B) 更新 Conda libstdc++：
     conda install -c conda-forge libstdcxx-ng

  C) 設置 LD_LIBRARY_PATH：
     export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

======================================================================
📋 驗證清單
======================================================================

配置階段：
  [✓] USE_LLVM 已設置
  [✓] TVM_MY_DEVICE_USE_LLVM=ON 在 config.cmake
  [ ] 重新編譯 TVM（如果之前沒有這個設置）
  [ ] 確認編譯時使用了 -DTVM_MY_DEVICE_USE_LLVM=1

編譯模型時：
  [ ] 看到 "[my_device codegen] Using LLVM backend mode"
  [ ] 沒有看到 "Using C++ source codegen"
  [ ] 成功生成 .so 文件

執行時（如果測試 run.py）：
  [ ] 沒有看到 "[my_device runtime] Loading my_device binary module"
  [ ] 沒有看到 "call c++ runtime"
  [ ] 正常執行，無 "Cannot find function" 錯誤

======================================================================
🚀 下一步行動
======================================================================

1. 確認 TVM 是否用當前配置重新編譯過：

   cd build
   grep TVM_MY_DEVICE_USE_LLVM CMakeCache.txt

   如果沒有顯示 ON，執行：
   rm -rf CMakeFiles CMakeCache.txt
   cmake ..
   make -j$(nproc)

2. 編譯模型並觀察 debug 訊息：

   export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/local/lib
   /usr/bin/python3 rvv_test.py mobilenet 2>&1 | tee compile_log.txt

3. 檢查輸出：

   grep "my_device" compile_log.txt

   應該看到 "Using LLVM backend mode"

======================================================================
📚 參考文檔
======================================================================

- FIX_LLVM_MODE.md - 完整修復指南
- DEBUG_SUMMARY.md - 問題診斷總結  
- VERIFY_LLVM_CONFIG.md - 驗證方法詳解
- check_build_llvm.sh - 自動檢查腳本
- test_llvm_codegen.py - Python 測試腳本

======================================================================

